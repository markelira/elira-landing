rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // Helper function to validate email format
    function isValidEmail(email) {
      return email is string &&
        email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // Stats: Public read, no client writes (admin only)
    match /stats/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    // Leads: Anyone can create (for lead capture forms), no reading for privacy
    // Validation ensures required fields and email format
    match /leads/{document} {
      allow create: if request.resource.data.keys().hasAll(['email', 'createdAt']) &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.size() <= 20; // Limit to 20 fields max
      allow read: if isAdmin(); // Only admins can read leads
      allow update, delete: if false;
    }
    
    // Consultations (Legacy): Restricted to authenticated users only
    // Duplicate checking moved to Cloud Functions for security
    match /consultations/{consultationId} {
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['name', 'email', 'phone', 'service', 'createdAt']) &&
        isValidEmail(request.resource.data.email);
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
      allow delete: if false;
    }
    
    // Activities: Authenticated users can read, only Cloud Functions can write
    match /activities/{document} {
      allow read: if isAuthenticated();
      allow create: if false; // Only created via Cloud Functions for data integrity
      allow update, delete: if false;
    }
    
    // Resources: Public read for PDF downloads
    match /resources/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    // Users: Users can read/update their own profile
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if false; // Only created via Cloud Functions
      allow delete: if false;
    }
    
    // Payments: Users can read their own payment records
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if false; // Only created via Cloud Functions
    }
    
    // Course Content: Public read for course structure
    match /course-content/{courseId} {
      allow read: if true;
      allow write: if false; // Only updated by admin
    }
    
    // User Progress: Users can read/update their own progress
    match /user-progress/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['userId']) &&
        request.resource.data.userId == userId;
      allow update: if isOwner(userId) &&
        // Prevent userId from being changed
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId']);
      allow delete: if false; // Progress should never be deleted

      // Lesson progress subcollection
      match /lessons/{lessonId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if false;
      }
    }

    // ========================================================================
    // Dashboard Enhancement Collections
    // ========================================================================

    // User Progress (New Schema): Users can read/write their own
    match /userProgress/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Learning Activities: Users can create and read their own
    match /learningActivities/{userId}/activities/{activityId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if false; // Activities are immutable
    }

    // Consultations (Enhanced): Users can read/update their own, instructors can read assigned ones
    // Note: This is separate from legacy consultations above
    match /consultationsEnhanced/{consultationId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         request.auth.uid == resource.data.instructorId ||
         isAdmin());
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['userId', 'status', 'createdAt']) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         request.auth.uid == resource.data.instructorId);
      allow delete: if false;
    }

    // Implementations: Users can read/write their own
    match /implementations/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Templates: All authenticated users can read
    match /templates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin can create/update templates
    }

    // Template Downloads: Users can read/write their own
    match /templateDownloads/{userId}/downloads/{downloadId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Notifications: Users can read/update their own
    match /notifications/{userId}/items/{notificationId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      allow create, delete: if false; // Only created by Cloud Functions
    }

    // Achievements: Users can read their own
    match /achievements/{userId}/earned/{achievementId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only created by Cloud Functions
    }

    // Weekly Insights: Users can read their own
    match /weeklyInsights/{userId}/weeks/{weekId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only created by Cloud Functions
    }

    // Course Timelines: All authenticated users can read
    match /courseTimelines/{courseId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin can create/update
    }
  }
}